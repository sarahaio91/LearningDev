<?xml version="1.0" encoding="utf-8"?>
<n:StateMachineNumberGuessWorkflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:n="clr-namespace:NumberGuessWorkflowActivities;assembly=NumberGuessWorkflowActivities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>NumberGuessWorkflowActivities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <n:StateMachineNumberGuessWorkflow.Implementation>
    <StateMachine InitialState="{x:Reference __ReferenceID3}" sads:DebugSymbol.Symbol="9xDZXLRuo6tlwG+VlxcDdGbZiAFDOlxVc2Vyc1x0cnVvbmcubGVcRGVza3RvcFxXb3Jrc3BhY2VcV0Y0NUdldHRpbmdTdGFydGVkVHV0b3JpYWxcTnVtYmVyR3Vlc3NXb3JrZmxvd0FjdGl2aXRpZXNfZHVcU3RhdGVNYWNoaW5lTnVtYmVyR3Vlc3NXb3JrZmxvd19kdS54YW1sFy0DiQESAgEBLgWBAQ0CATJADX0VAgEEZRVliAECAQIwCTsSAgE1QhFGHQIBLEkRVBoCASFZFV8lAgEaYhViYwIBFXkVeWMCARBqFXYaAgEGOA84dgIBOzMPM1oCATZEFUSFAQIBLVEXUV0CASdMF0xhAgEiWUlZVQIBIFwbXGUCARttG21rAgEHcRlxcQIBDnQZdHICAQxxV3FuAgEPdFd0bwIBDQ==">
      <State x:Name="__ReferenceID3" DisplayName="Initialize Target">
        <State.Entry>
          <Assign>
            <Assign.To>
              <OutArgument x:TypeArguments="x:Int32">
                <mca:CSharpReference x:TypeArguments="x:Int32">Target</mca:CSharpReference>
              </OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Int32">
                <mca:CSharpValue x:TypeArguments="x:Int32">new System.Random().Next(1, MaxNumber + 1)</mca:CSharpValue>
              </InArgument>
            </Assign.Value>
          </Assign>
        </State.Entry>
        <State.Transitions>
          <Transition DisplayName="T1">
            <Transition.To>
              <State x:Name="__ReferenceID0" DisplayName="Enter Guess">
                <State.Entry>
                  <WriteLine>
                    <InArgument x:TypeArguments="x:String">
                      <mca:CSharpValue x:TypeArguments="x:String">"Please enter a number between 1 and " + MaxNumber</mca:CSharpValue>
                    </InArgument>
                  </WriteLine>
                </State.Entry>
                <State.Exit>
                  <Assign>
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">
                        <mca:CSharpReference x:TypeArguments="x:Int32">Turns</mca:CSharpReference>
                      </OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">Turns + 1</mca:CSharpValue>
                      </InArgument>
                    </Assign.Value>
                  </Assign>
                </State.Exit>
                <State.Transitions>
                  <Transition DisplayName="Guess Correct">
                    <Transition.Trigger>
                      <n:ReadInt x:Name="__ReferenceID1" BookmarkName="EnterGuess">
                        <n:ReadInt.Result>
                          <OutArgument x:TypeArguments="x:Int32">
                            <mca:CSharpReference x:TypeArguments="x:Int32">Guess</mca:CSharpReference>
                          </OutArgument>
                        </n:ReadInt.Result>
                      </n:ReadInt>
                    </Transition.Trigger>
                    <Transition.To>
                      <State x:Name="__ReferenceID2" DisplayName="FinalState" IsFinal="True" />
                    </Transition.To>
                    <Transition.Action>
                      <WriteLine>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">Guess.ToString() + " is correct. You guessed it in " + Turns.ToString() + " turns."</mca:CSharpValue>
                        </InArgument>
                      </WriteLine>
                    </Transition.Action>
                    <Transition.Condition>
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Guess == Target</mca:CSharpValue>
                    </Transition.Condition>
                  </Transition>
                  <Transition Trigger="{x:Reference __ReferenceID1}" DisplayName="Guess Incorrect" To="{x:Reference __ReferenceID0}">
                    <Transition.Action>
                      <If>
                        <If.Condition>
                          <InArgument x:TypeArguments="x:Boolean">
                            <mca:CSharpValue x:TypeArguments="x:Boolean">Guess &lt; Target</mca:CSharpValue>
                          </InArgument>
                        </If.Condition>
                        <If.Then>
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Guess.ToString() + " is too low."</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                        </If.Then>
                        <If.Else>
                          <WriteLine>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Guess.ToString() + " is too high."</mca:CSharpValue>
                            </InArgument>
                          </WriteLine>
                        </If.Else>
                      </If>
                    </Transition.Action>
                    <Transition.Condition>
                      <mca:CSharpValue x:TypeArguments="x:Boolean">Guess != Target</mca:CSharpValue>
                    </Transition.Condition>
                  </Transition>
                </State.Transitions>
              </State>
            </Transition.To>
          </Transition>
        </State.Transitions>
      </State>
      <x:Reference>__ReferenceID0</x:Reference>
      <x:Reference>__ReferenceID2</x:Reference>
      <StateMachine.Variables>
        <Variable x:TypeArguments="x:Int32" Name="Guess" />
        <Variable x:TypeArguments="x:Int32" Name="Target" />
      </StateMachine.Variables>
    </StateMachine>
  </n:StateMachineNumberGuessWorkflow.Implementation>
</n:StateMachineNumberGuessWorkflow>